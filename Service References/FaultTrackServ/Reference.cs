//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ElectrosLtdApplication.FaultTrackServ {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FaultTrackServ.IFaultTrackService")]
    public interface IFaultTrackService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaultTrackService/GetFaultTracksByFaultId", ReplyAction="http://tempuri.org/IFaultTrackService/GetFaultTracksByFaultIdResponse")]
        Common.FaultTrack[] GetFaultTracksByFaultId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaultTrackService/GetLastFaultTrackByFaultId", ReplyAction="http://tempuri.org/IFaultTrackService/GetLastFaultTrackByFaultIdResponse")]
        Common.FaultTrack GetLastFaultTrackByFaultId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaultTrackService/AddFaultTrack", ReplyAction="http://tempuri.org/IFaultTrackService/AddFaultTrackResponse")]
        void AddFaultTrack(Common.FaultTrack ft);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaultTrackService/GetAllFaultTracks", ReplyAction="http://tempuri.org/IFaultTrackService/GetAllFaultTracksResponse")]
        Common.FaultTrack[] GetAllFaultTracks();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaultTrackService/Filter", ReplyAction="http://tempuri.org/IFaultTrackService/FilterResponse")]
        Common.FaultTrack[] Filter(System.Nullable<int> clientId, System.Nullable<int> faultId, System.Nullable<System.DateTime> from, System.Nullable<System.DateTime> to);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFaultTrackServiceChannel : ElectrosLtdApplication.FaultTrackServ.IFaultTrackService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FaultTrackServiceClient : System.ServiceModel.ClientBase<ElectrosLtdApplication.FaultTrackServ.IFaultTrackService>, ElectrosLtdApplication.FaultTrackServ.IFaultTrackService {
        
        public FaultTrackServiceClient() {
        }
        
        public FaultTrackServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FaultTrackServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FaultTrackServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FaultTrackServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Common.FaultTrack[] GetFaultTracksByFaultId(int id) {
            return base.Channel.GetFaultTracksByFaultId(id);
        }
        
        public Common.FaultTrack GetLastFaultTrackByFaultId(int id) {
            return base.Channel.GetLastFaultTrackByFaultId(id);
        }
        
        public void AddFaultTrack(Common.FaultTrack ft) {
            base.Channel.AddFaultTrack(ft);
        }
        
        public Common.FaultTrack[] GetAllFaultTracks() {
            return base.Channel.GetAllFaultTracks();
        }
        
        public Common.FaultTrack[] Filter(System.Nullable<int> clientId, System.Nullable<int> faultId, System.Nullable<System.DateTime> from, System.Nullable<System.DateTime> to) {
            return base.Channel.Filter(clientId, faultId, from, to);
        }
    }
}
